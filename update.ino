/**
   server update realize
   @author r3inbowari
   @date 2020/6/24
*/
#include "conf.h"

#define OS "esp8266"

int remote_major = 1;
int remote_minor = 5;
int remote_patch = 2;

void onUpdateByUser() {
  update_request();
}

void setRemoteVersion(int major, int minor, int patch) {
  remote_major = major;
  remote_minor = minor;
  remote_patch = patch;
}

const unsigned char update_pic[] U8X8_PROGMEM = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xa5, 0xa5, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x42, 0xa0, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x02, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x51, 0x49, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x89, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x42, 0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x40, 0x10, 0xa5, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x5e, 0xad, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x45, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x28, 0x15, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x56, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x80, 0x92, 0x48, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x20, 0x44, 0x92, 0xa8, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x2a, 0x84, 0x92, 0x24, 0xa5, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x1a, 0x20, 0x49, 0x92, 0xa8, 0xaa, 0x5a, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x40, 0x24, 0x49, 0x42, 0x55, 0x55, 0xad, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x8a, 0x14, 0x88, 0x24, 0x55, 0x55, 0xab, 0xaa, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x00, 0x25, 0x92, 0x48, 0x55, 0x55, 0x55, 0xb5, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x02, 0x49, 0x90, 0x48, 0x52, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x84, 0x0a, 0x25, 0x49, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xad, 0xaa, 0xaa, 0x42, 0x51, 0xa0, 0x90, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x01, 0x00, 0x0a, 0x0a, 0x89, 0xaa, 0xaa, 0xaa, 0xaa, 0x6a, 0x55, 0x55, 0x55, 0x55, 0xb5, 0xaa, 0x40, 0x4a, 0xa4, 0x50, 0x52, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x01, 0x11, 0x85, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x40, 0x40, 0x22, 0x52, 0x52, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x10, 0x10, 0x44, 0x89, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0xd5, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x01, 0x82, 0x28, 0x24, 0x29, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x00, 0x42, 0x51, 0x92, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x22, 0x55, 0xab, 0xaa, 0xaa, 0xaa, 0x82, 0x20, 0x29, 0x82, 0x24, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0xd5, 0x54, 0x55, 0x55, 0x55, 0x05, 0x04, 0x80, 0x54, 0x4a, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x55, 0xb5, 0xaa, 0xaa, 0x54, 0x15, 0x41, 0x50, 0x82, 0x10, 0xaa, 0xaa, 0xaa, 0xa4, 0xaa, 0x24, 0x55, 0x55, 0x55, 0x15, 0x50, 0x15, 0x10, 0x02, 0x54, 0x4a, 0x55, 0x55, 0x15, 0xa9, 0x2a, 0x01, 0xaa, 0xaa, 0xaa, 0x0a, 0xa0, 0x84, 0x04, 0xa8, 0x0a, 0x91, 0x54, 0x55, 0x55, 0x52, 0x15, 0x00, 0x55, 0x55, 0x55, 0x05, 0x42, 0x35, 0x00, 0x29, 0x59, 0x24, 0xa9, 0xaa, 0x92, 0x04, 0x0a, 0x00, 0x55, 0x55, 0x55, 0x81, 0x00, 0x0a, 0x40, 0x08, 0x84, 0x88, 0x54, 0x55, 0x09, 0x52, 0x01, 0x00, 0x55, 0xa9, 0x20, 0x00, 0x88, 0x94, 0x08, 0x44, 0x51, 0x22, 0x52, 0x15, 0x52, 0x08, 0x44, 0x24, 0x55, 0x55, 0x00, 0x10, 0x22, 0x00, 0x82, 0x08, 0x14, 0x44, 0x80, 0xa2, 0x04, 0x42, 0x00, 0x00, 0x05, 0x15, 0x08, 0x82, 0x00, 0x24, 0x10, 0x52, 0xa1, 0x08, 0x21, 0x09, 0x00, 0x00, 0x00, 0x02, 0x22, 0x15, 0x40, 0x08, 0xaa, 0x80, 0x44, 0x14, 0x14, 0x21, 0x04, 0x22, 0x89, 0x00, 0x22, 0x00, 0x01, 0x09, 0x11, 0xa1, 0x00, 0x0a, 0x10, 0x91, 0x12, 0x8a, 0x48, 0x08, 0x12, 0x20, 0x00, 0x20, 0x08, 0x00, 0x04, 0x04, 0x24, 0xa1, 0x42, 0x24, 0xa8, 0x20, 0x02, 0xa1, 0x10, 0x09, 0x80, 0x04, 0x40, 0x40, 0x20, 0x91, 0x08, 0x08, 0x14, 0x49, 0x05, 0x82, 0x28, 0x24, 0xb4, 0x01, 0x12, 0x40, 0x01, 0x12, 0x04, 0x00, 0xa2, 0x42, 0x21, 0x12, 0x50, 0x28, 0x42, 0xd1, 0x22, 0x24, 0x00, 0x11, 0x04, 0x00, 0x51, 0x55, 0x08, 0x08, 0x44, 0xa4, 0x2a, 0x81, 0x08, 0xa4, 0xe8, 0x90, 0x24, 0x80, 0x90, 0x08, 0x00, 0x80, 0x42, 0xa2, 0x88, 0x12, 0x08, 0x0a, 0xa2, 0x28, 0x92, 0x06, 0x81, 0x24, 0x00, 0x42, 0x4a, 0x12, 0x88, 0x08, 0x51, 0x40, 0x21, 0x20, 0x00, 0x42, 0xd4, 0x2a, 0x08, 0x80, 0x4a, 0x10, 0x21, 0x44, 0x21, 0x22, 0x02, 0x94, 0x4a, 0x81, 0x94, 0x90, 0x54, 0x45, 0x25, 0x82, 0x20, 0x45, 0x88, 0x10, 0x84, 0x48, 0x00, 0x51, 0x94, 0x14, 0x00, 0x44, 0x2b, 0x1d, 0x80, 0x08, 0x08, 0x10, 0x21, 0xa2, 0x28, 0x02, 0x54, 0x8a, 0x22, 0xa5, 0xaa, 0x90, 0xd4, 0x4a, 0x09, 0x20, 0xa1, 0x42, 0x84, 0x04, 0x02, 0x90, 0x82, 0x20, 0x49, 0x4a, 0x01, 0x44, 0x2a, 0x15, 0xa2, 0x92, 0x14, 0x14, 0x11, 0x20, 0x80, 0x24, 0x28, 0x4a, 0x92, 0x90, 0x94, 0x11, 0xa9, 0x25, 0x21, 0x04, 0x42, 0x41, 0x40, 0x02, 0x29, 0x80, 0x92, 0x54, 0x25, 0x25, 0x22, 0x44, 0x52, 0x03, 0x88, 0xa0, 0x08, 0x00, 0x14, 0x48, 0x84, 0x2a, 0xa5, 0xaa, 0x52, 0x8a, 0x88, 0x90, 0xe8, 0xa8, 0x02, 0x12, 0x00, 0x14, 0x80, 0x02, 0x11, 0x44, 0x4a, 0x02, 0xa4, 0x50, 0x12, 0x05, 0xb1, 0x01, 0xa8, 0x40, 0x52, 0x81, 0x08, 0xa8, 0x4a, 0x91, 0x90, 0xa8, 0x49, 0x8d, 0xa4, 0xe8, 0xda, 0x24, 0x01, 0x0a, 0x04, 0x48, 0xa0, 0x22, 0x00, 0x25, 0x25, 0x55, 0x96, 0x22, 0x49, 0x52, 0x31, 0x10, 0x4a, 0x20, 0x51, 0x01, 0x15, 0x90, 0xaa, 0x88, 0x48, 0xa2, 0x20, 0x14, 0x02, 0xa9, 0x75, 0x45, 0x90, 0x4a, 0x0a, 0x54, 0x40, 0x45, 0x10, 0x35, 0x92, 0x14, 0xab, 0xa2, 0x54, 0xa0, 0x50, 0x90, 0x0a, 0x10, 0xa0, 0x02, 0x25, 0x10, 0x4a, 0x42, 0x25, 0xa5, 0x84, 0x54, 0x09, 0x32, 0xeb, 0x25, 0xa4, 0x4a, 0x05, 0x29, 0x80, 0x4a, 0x92, 0x28, 0xd5, 0xaa, 0x2a, 0x25, 0x52, 0xa4, 0x35, 0x55, 0x49, 0x24, 0x68, 0x40, 0x29, 0x90, 0xa4, 0x4a, 0x55, 0x11, 0x44, 0x4a, 0xa5, 0x28, 0xd5, 0xaa, 0x92, 0x08, 0x93, 0x2a, 0x42, 0x0b, 0xa9, 0x52, 0x92, 0x44, 0xa9, 0x90, 0x48, 0xf2, 0x56, 0x15, 0x24, 0x55, 0x54, 0x92, 0x54, 0x50, 0x05, 0x89, 0x24, 0x2a, 0x05, 0x2b, 0x55, 0xa5, 0x2a, 0xa2, 0x12, 0x00, 0x85, 0x44, 0x24, 0x09, 0xaa, 0x50, 0x89, 0x50, 0xda, 0x54, 0x15, 0x08, 0x41, 0x49, 0xa4, 0x2a, 0x28, 0x89, 0x48, 0x92, 0x20, 0x0a, 0x52, 0x95, 0x12, 0x55, 0x49, 0xa5, 0x94, 0x14, 0x09, 0x84, 0x44, 0x22, 0x29, 0x49, 0x8a, 0x50, 0x09, 0x55, 0x55, 0x42, 0x84, 0x48, 0x2a, 0x40, 0xa2, 0x12, 0x08, 0x94, 0x04, 0x02, 0x14, 0x25, 0x52, 0xaa, 0x92, 0x94, 0x10, 0x81, 0x80, 0x14, 0x89, 0x40 };
void update_animation() {
  u8g2.drawXBMP(0, 0, 128, 64, update_pic);
  u8g2.sendBuffer();
  delay(random(2000, 4000));
  u8g2.setDrawColor(0);
  u8g2.drawBox(24, 40, 80, 16); // 0-23 24-103 105-127
  u8g2.setDrawColor(1);
  u8g2.drawFrame(25, 41, 78, 14);
  u8g2.sendBuffer();
  delay(1000);
}

void check_update_not_update() {
  LogDivisionSta("Update Checking");
  Serial.print("Local version: ");
  Serial.println(String(config.major) + "." + String(config.minor) + "." + String(config.patch));
  Serial.print("SHA1: ");
  Serial.println(sha1(String(config.major) + "." + String(config.minor) + "." + String(config.patch)));
  Serial.print("Remote version: ");
  Serial.println(String(remote_major) + "." + String(remote_minor) + "." + String(remote_patch));
  Serial.print("SHA1: ");
  Serial.println(sha1(String(remote_major) + "." + String(remote_minor) + "." + String(remote_patch)));

  int check_tag = version_diff(config.major, config.minor, config.patch, remote_major, remote_minor, remote_patch);
  if (check_tag == -1) {
    Serial.println("Found new update, but now the update tool will not run auto again.");
  } else if (check_tag == 1) {
    Serial.println("The local version is ahead of the remote branch.");
    Serial.println("Maybe this is a beta version.");
  } else {
    Serial.println("No updates available.");
  }
  LogDivisionEnd("Update Checking");
}

void check_update() {
  LogDivisionSta("Update Checking");
  Serial.print("Local version: ");
  Serial.println(String(config.major) + "." + String(config.minor) + "." + String(config.patch));
  Serial.print("SHA1: ");
  Serial.println(sha1(String(config.major) + "." + String(config.minor) + "." + String(config.patch)));
  Serial.print("Remote version: ");
  Serial.println(String(remote_major) + "." + String(remote_minor) + "." + String(remote_patch));
  Serial.print("SHA1: ");
  Serial.println(sha1(String(remote_major) + "." + String(remote_minor) + "." + String(remote_patch)));

  int check_tag = version_diff(config.major, config.minor, config.patch, remote_major, remote_minor, remote_patch);
  if (check_tag == -1) {
    Serial.println("Found new update.");
    String updatePath = config.update_host + "/" + OS + "/" + config.type + "_v5_" + String(remote_major) + "." + String(remote_minor) + "." + String(remote_patch) + ".bin";

    // 刷新LED界面到更新页
    update_animation();
    __esp_update(updatePath);
  } else if (check_tag == 1) {
    Serial.println("The local version is ahead of the remote branch.");
    Serial.println("Maybe this is a beta version.");
  } else {
    Serial.println("No updates available.");
  }
  LogDivisionEnd("Update Checking");
}

/**
   @return 1 超前版本 -1 落后版本 0 无差异版本
*/
int version_diff(int remote_major, int remote_minor, int remote_patch, int local_major, int local_minor, int local_patch )
{
  int client_version[3] = { remote_major, remote_minor, remote_patch};
  int base_version[3] = { local_major, local_minor, local_patch };

  int diff = 0;
  diff += (client_version[0] - base_version[0]) << 20;
  diff += (client_version[1] - base_version[1]) << 10;
  diff += (client_version[2] - base_version[2]);
  if (diff > 0) {
    return 1;
  }
  else if (diff == 0) {
    return 0;
  }
  else {
    return -1;
  }
}

void __esp_update(String updatePath) {
  WiFiClient client;
  ESPhttpUpdate.setLedPin(LED_BUILTIN, LOW);
  ESPhttpUpdate.onStart(update_started);
  ESPhttpUpdate.onEnd(update_finished);
  ESPhttpUpdate.onProgress(update_progress);
  ESPhttpUpdate.onError(update_error);

  Serial.println("Redirect to " + updatePath);
  t_httpUpdate_return ret = ESPhttpUpdate.update(client, updatePath);

  switch (ret) {
    case HTTP_UPDATE_FAILED:
      Serial.printf("HTTP_UPDATE_FAILD Error (%d): %s\n", ESPhttpUpdate.getLastError(), ESPhttpUpdate.getLastErrorString().c_str());
      break;

    case HTTP_UPDATE_NO_UPDATES:
      Serial.println("HTTP_UPDATE_NO_UPDATES");
      break;

    case HTTP_UPDATE_OK:
      Serial.println("HTTP_UPDATE_OK");
      break;
  }
}

void update_started() {
  Serial.println("CALLBACK:  HTTP update process started");
}


int enter_count = 0;
int step_count = 0;

void update_finished() {
  for (int i = step_count; i < 74; i++) {
    u8g2.drawLine(27 + i, 43, 27 + i, 52);
    u8g2.sendBuffer();
    delay(random(1, 3) * 20);
  }
  config.major = remote_major;
  config.minor = remote_minor;
  config.patch = remote_patch;
  saveConfiguration("config.json", config);
  Serial.println("CALLBACK:  HTTP update process finished");
  delay(random(2000, 3000));
}

void update_progress(int cur, int total) {
  Serial.printf("CALLBACK:  HTTP update process at %d of %d bytes...\n", cur, total);
  enter_count ++;
  if (enter_count % 3  == 0) {
    u8g2.drawLine(27 + step_count, 43, 27 + step_count, 52);
    u8g2.sendBuffer();
    step_count ++;
  }
}

void update_error(int err) {
  Serial.printf("CALLBACK:  HTTP update fatal error code %d\n", err);
}
